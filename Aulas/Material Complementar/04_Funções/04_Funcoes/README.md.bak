# 4. Funções
W. Celes e J. L. Rangel

## 4.1. Definição de funções

As funções dividem grandes tarefas de computação em tarefas menores. Os programas em C geralmente consistem de várias pequenas funções em vez de poucas de maior tamanho. A
criação de funções evita a repetição de código, de modo que um procedimento que é repetido deve ser transformado numa função que, então, será chamada diversas vezes. Um
programa bem estruturado deve ser pensado em termos de funções, e estas, por sua vez, podem (e devem, se possível) esconder do corpo principal do programa detalhes ou
particularidades de implementação. Em C, tudo é feito através de funções. Os exemplos anteriores utilizam as funções da biblioteca padrão para realizar entrada e saída. Neste
capítulo, discutiremos a codificação de nossas próprias funções.

A forma geral para definir uma função é:

```
tipo_retornado nome_da_função (lista de parâmetros...)
{
	corpo da função
}

``` 
Para ilustrar a criação de funções, consideraremos o cálculo do fatorial de um número.
Podemos escrever uma função que, dado um determinado número inteiro não negativo n,
imprime o valor de seu fatorial. Um programa que utiliza esta função seria:

```
/* programa que le um numero e imprime seu fatorial */
#include <stdio.h>
void fat (int n);
/* Função principal */
int main (void)
{
int n;
scanf("%d", &n);
fat(n);
return 0;
}
/* Função pa/* programa que le um numero e imprime seu fatorial */
#include <stdio.h>
void fat(int n);
/* Função principal */
int main(void)
{
	int n;
	scanf("%d", &n);
	fat(n);
	return 0;
}
/* Função para imprimir o valor do fatorial */
void fat(int n)
{
	int i;
	int f = 1;
	for (i = 1; i <= n; i++)
		f *= i;
	printf("Fatorial = %d\n", f);
}

```

Notamos, neste exemplo, que a função `fat` recebe como parâmetro o número cujo fatorial deve ser impresso.<br>
Os parâmetros de uma função devem ser listados, com seus respectivos tipos, entre os parênteses que seguem o nome da função. Quando uma função não tem
parâmetros, colocamos a palavra reservada `void` entre os parênteses. <br>
Devemos notar que `main` também é uma função; sua única particularidade consiste em ser a função automaticamente executada após o programa ser carregado.<br>
Como as funções `main` que temos apresentado não recebem parâmetros, temos usado a palavra `void` na lista de parâmetros.

Além de receber parâmetros, uma função pode ter um valor de retorno associado. No exemplo do cálculo do fatorial, a função fat não tem nenhum valor de retorno, portanto
colocamos a palavra void antes do nome da função, indicando a ausência de um valor de retorno.

```

void fat (int n)
{
	. . .
}

```

A função `main` obrigatoriamente deve ter um valor inteiro como retorno. Esse valor pode ser usado pelo sistema operacional para testar a execução do programa. A convenção
geralmente utilizada faz com que a função main retorne zero no caso da execução ser bem sucedida ou diferente de zero no caso de problemas durante a execução.

Por fim, salientamos que C exige que se coloque o protótipo da função antes desta ser chamada. O protótipo de uma função consiste na repetição da linha de sua definição
seguida do caractere (;). Temos então:


```
void fat (int n); /* obs: existe ; no protótipo */
int main (void)
{
	. . .
}
void fat (int n) /* obs: nao existe ; na definição */
{
	. . .
}
```
A rigor, no protótipo não há necessidade de indicarmos os nomes dos parâmetros, apenas os seus tipos, portanto seria válido escrever: 
```
void fat (int);
```
Porém, geralmente mantemos os nomes dos parâmetros, pois servem como documentação do significado de cada parâmetro, desde que utilizemos nomes coerentes. O protótipo da função é necessário
para que o compilador verifique os tipos dos parâmetros na chamada da função. Por exemplo, se tentássemos chamar a função com fat(4.5); o compilador provavelmente
indicaria o erro, pois estaríamos passando um valor real enquanto a função espera um valor inteiro. É devido a esta necessidade que se exige a inclusão do arquivo stdio.h para a
utilização das funções de entrada e saída da biblioteca padrão. Neste arquivo, encontram-se, entre outras coisas, os protótipos das funções `printf` e `scanf`.

Uma função pode ter um valor de retorno associado. <br>
Para ilustrar a discussão, vamos reescrever o código acima, fazendo com que a função fat retorne o valor do fatorial.<br>
A função main fica então responsável pela impressão do valor.

```
/* programa que le um numero e imprime seu fatorial (versão 2) */
#include <stdio.h>
int fat(int n);
int main(void)
{
	int n, r;
	scanf("%d", &n);
	r = fat(n);
	printf("Fatorial = %d\n", r);
	return 0;
}
/* funcao para calcular o valor do fatorial */
int fat(int n)
{
	int i;
	int f = 1;
	for (i = 1; i <= n; i++)
		f *= i;
	return f;
}

```

## 4.2. Pilha de execução

Apresentada a forma básica para a definição de funções, discutiremos agora, em detalhe, como funciona a comunicação entre a função que chama e a função que é chamada.<br>
Já mencionamos na introdução deste curso que as funções são independentes entre si.<br>
As variáveis locais definidas dentro do corpo de uma função, *e isto inclui os parâmetros das funções*, não existem fora da função.<br>
Cada vez que a função é executada, as variáveis locais são criadas, e, quando a execução da função termina, estas variáveis deixam de existir.

A transferência de dados entre funções é feita através dos parâmetros e do valor de retorno da função chamada. <br>
Conforme mencionado, uma função pode retornar um valor para a função que a chamou e isto é feito através do comando return. <br>
Quando uma função tem um valor de retorno, a chamada da função é uma expressão cujo valor resultante é o valor retornado pela função. <br>
Por isso, foi válido escrevermos na função `main` acima a expressão `r = fat(n);` que chama a função `fat` armazenando seu valor de retorno na variável `r`.

A comunicação através dos parâmetros requer uma análise mais detalhada. Para ilustrar a discussão, vamos considerar o exemplo abaixo, no qual a implementação da função `fat` foi
ligeiramente alterada:

```
/* programa que le um numero e imprime seu fatorial (versão 3) */
#include <stdio.h>
int fat (int n);
int main (void)
{
	int n = 5;
	int r;
	r = fat ( n );
	printf("Fatorial de %d = %d \n", n, r);
	return 0;
}

int fat (int n)
{
	int f = 1.0;
	while (n != 0)
	{
		f *= n;
		n--;
	}
	return f;
}

```
Neste exemplo, podemos verificar que, no final da função fat, o parâmetro n tem valor igual a zero (esta é a condição de encerramento do laço while). No entanto, a saída do programa será:


```
Fatorial de 5 = 120
```

pois o valor da variável n não mudou no programa principal. Isto porque a linguagem C trabalha com o conceito de passagem por valor. Na chamada de uma função, o valor
passado é atribuído ao parâmetro da função chamada. Cada parâmetro funciona como uma variável local inicializada com o valor passado na chamada. Assim, a variável n (parâmetro
da função fat) é local e não representa a variável n da função `main` (o fato de as duas variáveis terem o mesmo nome é indiferente; poderíamos chamar o parâmetro de v, por
exemplo). Alterar o valor de n dentro de `fat` não afeta o valor da variável n de main.

A execução do programa funciona com o modelo de pilha. De forma simplificada, o
modelo de pilha funciona da seguinte maneira: cada variável local de uma função é
colocada na pilha de execução. Quando se faz uma chamada a uma função, os parâmetros
são copiados para a pilha e são tratados como se fossem variáveis locais da função
chamada. Quando a função termina, a parte da pilha correspondente àquela função é
liberada, e por isso não podemos acessar as variáveis locais de fora da função em que elas
foram definidas.

Para exemplificar, vamos considerar um esquema representativo da memória do computador. Salientamos que este esquema é apenas uma maneira didática de explicar o
que ocorre na memória do computador. Suponhamos que as variáveis são armazenadas na memória como ilustrado abaixo. Os números à direita representam endereços (posições) fictícios de memória e os nomes à esquerda indicam os nomes das variáveis. A figura
abaixo ilustra este esquema representativo da memória que adotaremos.

Figura 4.2: Execução do programa passo a passo.

Isto ilustra por que o valor da variável passada nunca será alterado dentro da função. A
seguir, discutiremos uma forma para podermos alterar valores por passagem de parâmetros,
o que será realizado passando o endereço de memória onde a variável está armazenada.
Vale salientar que existe outra forma de fazermos comunicação entre funções, que consiste
no uso de variáveis globais. Se uma determinada variável global é visível em duas funções,
ambas as funções podem acessar e/ou alterar o valor desta variável diretamente. No entanto, conforme já mencionamos, o uso de variáveis globais em um programa deve ser
feito com critério, pois podemos criar códigos com uma alto grau de interdependência entre
as funções, o que dificulta a manutenção e o reuso do código.

## 4.3. Ponteiro de variáveis

.
.
.
.
.

### Passando ponteiros para funções

Os ponteiros oferecem meios de alterarmos valores de variáveis acessando-as
indiretamente. Já discutimos que as funções não podem alterar diretamente valores de
variáveis da função que fez a chamada. No entanto, se passarmos para uma função os
valores dos endereços de memória onde suas variáveis estão armazenadas, a função pode
alterar, indiretamente, os valores das variáveis da função que a chamou.

Vamos analisar o uso desta estratégia através de um exemplo. Consideremos uma função
projetada para trocar os valores entre duas variáveis. O código abaixo:

```
/* funcao troca (versao ERRADA) */
#include <stdio.h>
void troca (int x, int y )
{
  int temp;
  temp = x;
  x = y;
  y = temp;
}
int main ( void )
{
  int a = 5, b = 7;
  troca(a, b);
  printf("%d %d \n", a, b);
  return 0;
}

```
não funciona como esperado (serão impressos 5 e 7), pois os valores de a e b da função
main não são alterados. Alterados são os valores de x e y dentro da função troca, mas
eles não representam as variáveis da função main, apenas são inicializados com os valores
de a e b. A alternativa é fazer com que a função receba os endereços das variáveis e, assim,
alterar seus valores indiretamente. Reescrevendo:

```
/* funcao troca (versao CORRETA) */
#include <stdio.h>
void troca (int *px, int *py )
{
  int temp;
  temp = *px;
  *px = *py;
  *py = temp;
}
int main ( void )
{
  int a = 5, b = 7;
  troca(&a, &b); /* passamos os endereços das variáveis */
  printf("%d %d \n", a, b);
  return 0;
}

```

A Figura 4.6 ilustra a execução deste programa mostrando o uso da memória. Assim, conseguimos o efeito desejado. Agora fica explicado por que passamos o endereço das
variáveis para a função scanf, pois, caso contrário, a função não conseguiria devolver os valores lidos.


## 4.4. Recursividade